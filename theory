    Workbench

Первая вкладка MYSQL Connections. Показывает нам наши БД, можно добавлять данные,
выполнять запросы и пр.

Для создания подключения, добавляем в подключении название, имя пользователя и если
необходимо - пароль.
Для того, чтобы можно было изменять данные при апдейте, необходимо зайти в
"edit->preferences->sql editor" и снять галочку внизу рядом с пунктом "Safe updates..."

Модели.

Вторая вкладка Models. Инструмент для построения архитектуры самой БД.
Нажимаем кнопку "+". И у нас открывается окно с новой моделью.
Содается новая БД с названием по умолчанию mydb, его можно отредактировать, нажав
правой кнопкой мыши на вкладке.
Далее можно добавлять таблицы 2 способами:
1. Через вкладку Add Table.
2. Через вкладку Add Diagram. Второй вариант более наглядный.
Открывается пустое поле, справа есть колонка со сниппетами, их можно делать самому,
и потом оттуда выбирать уже готовые схемы таблиц (например готовую таблицу юзеров
или названий категорий).
Рекомендуется при создании модели, использовать слои, например слой отвечающий
за авторизацию, слой отвечающий за товары и пр. Потом в эти слои можно помещать таблицы
и это удобно, т.к. наглядно понятно, что к чему относится.
Таблицу можно добавить, кликнув по панели с инструментами (или нажав кнопку "T").
Выбираем имя, добавляем поля и описания полей.
Ниже в инструментах есть связи, их используем для связи таблиц, ключи и типы в этом
случае формируются самостоятельно.
Для создания базы на основе модели нажимаем Database->Forward Engeneer. Выбираем наш
коннекшн. И проставляем необходимые галочки.
Также после создания таблицы, кликнув по ней дважды мы получим доступы к инсертам,
изменениям внешних ключей и пр.

Можно экспортировать модель, например сохранить в файл, который потом можно распечатать.
File->Export

Для того, чтобы открыть модель уже существующей БД, заходим в 1-ю вкладку MYSQL Connections
И в Database->Reverse Engeneer выбираем нашу БД.

    Создание хранимых процедур.

Хранимая процедура - набор действий, которые можно осуществлять по требованию.
Процедура - независимая, функция получает данные и возвращает данные.

CREATE PROCEDURE. Полный синтаксис команды тут:
https://dev.mysql.com/doc/refman/8.0/en/create-procedure.html

Пример хранимой процедуры:
При описании процедур, их команды завершаются ";"
Поэтому необходимо переустановить указатель окончания команды:
DELIMITER //
CREATE PROCEDURE `create user` (`name` VARCHAR(255),`pass`VARCHAR(255))
BEGIN - для группировки команд в одну
INSERT INTO `users` (`login`,`pass`) VALUES (`name`,`pass`);
END //
DELIMITER ;

Вызываем процедуру:
CALL `create user` (`vasiliy`,`555`);

Внутри процедур доступны различные операторы (условные, циклы и пр.)
Вставим 10 пользователей, в конце у которых будут разные цифры.
DELIMITER //
CREATE PROCEDURE `ins`()
BEGIN
 DECLARE i INT DEFAULT 0; - объявляем переменную со стартовым значением 0
 WHILE i<10 DO
    INSERT INTO `users` (`login`,`pass`) VALUES (CONCAT('vasia',i),'1111');
    SET i=i+1;
 END WHILE;
END //
DELIMITER ;

Есть еще конструкция цикла (аналог do while)
REPEAT
statement
UNTIL condition;
END REPEAT;

IF condition THEN
statement
[ELSEIF condition THEN statement]
[ELSE statement]
END IF

CASE i
    WHEN 1 THEN statement;
    WHEN 2 THEN statement;
    ELSE statement;
END CASE;

CASE можн оприменять даже в запросах.
SELECT CASE login WHEN 'ivan' THEN 'ivan01' ELSE login END FROM users;

SHOW CREATE PROCEDURE `ins` - можно увидеть процедуру изнутри.

        Функции

DELIMITER //
CREATE FUNCTION smm (a INT,b INT) RETURNS INT BEGIN
    RETURN a+b;
END //
DELIMITER ;

SELECT smm(1,5);

        Тригеры

Функция которая срабатывает при каком-либо событии. Используется для контроля
каких либо событий, например изменений в каких-либо таблицах.
BEFORE INSERT - сначала срабатывает тригер, потом запись вставляется в таблицу.

        Самостоятельно

use publishing_company;

DELIMITER //
CREATE FUNCTION `profit` (a INT) returns float begin
	RETURN (SELECT (SELECT `price` FROM books WHERE `id_book`=a)*(SELECT SUM(`qty`) FROM sales WHERE `id_book`=a GROUP BY `id_book`));
END //

CREATE PROCEDURE `add_author`(`First_Name` VARCHAR(255),`Last_Name` VARCHAR(255),`id_country` INT)
begin
INSERT INTO `authors` (`First_Name`,`Last_Name`,`id_country`) VALUES (`First_Name`,`Last_Name`,`id_country`);
END //
DELIMITER ;

SELECT profit(3);
CALL add_author('Sam','Simon','2');








